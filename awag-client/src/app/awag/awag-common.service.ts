/* Generated by AWAG */
import { Injectable } from '@angular/core';

import { AwagAlertService } from './alert/service/awag-alert.service';
import { AwagBreadcrumbService, Breadcrumb } from './awag-breadcrumb.service';
import { AwagConfigService, ConfigItem } from './awag-config.service';
import { AwagEnvironmentService } from './awag-environment.service';
import { AwagLoggerService } from './logger/awag-logger.service';
import { AwagModalContext } from './awag-modal-context';

/**
 * コールバック管理キー
 */
export enum CallbackKey {
  RESET = 'reset',
}

/**
 * @description
 * AWAGの共通サービスを管理するクラス。
 */
@Injectable({
  providedIn: 'root'
})
export class AwagCommonService {

  /**
   * コンパクト表示状態
   */
  private _isCompactView = true;

  /* 汎用的にコールバック管理 */
  private readonly callbacks: { [key in CallbackKey]?: (() => void)[] } = {};

  constructor(
    private readonly awagAlert: AwagAlertService,
    private readonly awagBreadcrumb: AwagBreadcrumbService,
    private readonly awagConfig: AwagConfigService,
    private readonly awagEnvironment: AwagEnvironmentService,
    private readonly awagLogger: AwagLoggerService,
  ) {
  }

/**
   * コールバック管理キーとコールバックを指定して登録します。
   * @param key コールバック管理キー
   * @param callback コールバック
   */
  registerCallback(key: CallbackKey, callback: () => void): void {
    this.callbacks[key] ??= [];
    this.callbacks[key].push(callback);
    this.awagLogger.develop('AwagCommonService.registerCallback()', key, 'Callbacks:', this.callbacks[key].length);
  }

  /**
   * コールバック管理キーとコールバックを指定して登録を解除します。
   * @param key コールバック管理キー
   * @param callback コールバック
   */
  unregisterCallback(key: CallbackKey, callback: () => void): void {
    if (!this.callbacks[key]) {
      return;
    }
    const index = this.callbacks[key].indexOf(callback);
    if (index > -1) {
      this.callbacks[key].splice(index, 1);
    }
    this.awagLogger.develop('AwagCommonService.unregisterCallback()', key, 'Callbacks:', this.callbacks[key].length);
  }

  /**
   * コールバック管理キーを指定して、登録されているコールバックをすべて実行します。
   * @param key コールバック管理キー
   */
  triggerCallbacks(key: CallbackKey): void {
    if (!this.callbacks[key]) {
      return;
    }
    for (const callback of this.callbacks[key]) {
      callback();
    }
  }

  /**
   * アラート管理を返します
   * @returns AwagConfigService
   */
  public getAlert(): AwagAlertService {
    return this.awagAlert;
  }

  /**
   * 設定情報を返します
   * @returns AwagConfigService
   */
  public getConfig(): AwagConfigService {
    return this.awagConfig;
  }

  /**
   * 環境設定値を返します
   * @returns AwagEnvironmentService
   */
  public getEnvironment(): AwagEnvironmentService {
    return this.awagEnvironment;
  }

  /**
   * パンくずリストを返します
   * @returns Breadcrumb[]
   */
  get breadcrumbs(): Breadcrumb[] {
    return this.awagBreadcrumb.breadcrumbs;
  }

  /**
   * パンくず管理サービスを返します
   * @returns AwagBreadcrumbService
   */
  public getBreadcrumb(): AwagBreadcrumbService {
    return this.awagBreadcrumb;
  }

  /**
   * @description
   * 画面トップにスクロールします。
   **/
  public scrollToTop(modalContext: AwagModalContext | null = null) {
    if (modalContext) {
      const element = document.querySelector('.modal-body');
      if (element) {
        element.scrollTop = 0;
      } else {
        // モーダルを閉じる遷移ではスクロール操作は行わない
      }
    } else {
      document.documentElement.scrollTop = 0;
    }
  }

  /**
   * @description
   * 以下を格納したファンクションキーオブジェクトのリスト
   * - キー
   * - 表示ラベル
   * - コールバック関数
   */
  private _functionKeys: any = [];

  /**
   * @description
   * ファンクションキーオブジェクトを取得します。
   */
  public get functionKeys(): any {
    return this._functionKeys;
  }

  /**
   * @description
   * ファンクションキーオブジェクトを設定します。
   */
  public set functionKeys(value: any) {
    this._functionKeys = value;
  }

  /**
   * @description
   * ファンクションキーの表示ラベル、コールバック関数を追加します。
   * @param {string} key F1 to F12 keys
   * @param {string | null} label text to display
   * @param {Function} callback callback function
   */
  public addFunctionKey(key: string, label: string | null, callback: () => void) {
    setTimeout(() => {
      const isDuplicate = this.functionKeys.filter((functionKey: any) => functionKey.key === key).length > 0;
      if (!isDuplicate) {
        this.functionKeys.push({
          key: key.toUpperCase(), // F1 - F12
          label: label,
          callback: callback
        });
      }
    });
  }

  /**
   * @description
   * ファンクションキーオブジェクトを全てクリアします。
   */
  public clearFunctionKey() {
    this.functionKeys = [];
  }

  /**
   * @description
   * 指定したオブジェクトから空の値を持つkeyを削除する。また、referenceに存在しないkeyも削除します。
   * @param {any} object 対象のオブジェクト
   * @param {any} reference Referencedオブジェクト
   */
  toOmittedObject(object: any, reference: any) {
    const newObject = JSON.parse(JSON.stringify(object));
    // Delete empty field.
    Object.keys(newObject).forEach((key: any) => {
      if (newObject[key] === '' || newObject[key] === null) {
        delete newObject[key];
      }
    });
    // Delete difference field.
    Object.keys(newObject).forEach((key: any) => {
      if (reference[key] === undefined) {
        delete newObject[key];
      }
    });
    return newObject;
  }

  /**
   * @description
   * Material DesignのTheme colorの名前を取得します。
   * @returns 
   */
  getColor(): string {
    return this.awagConfig.get(ConfigItem.COLOR);
  }

  /**
   * @description
   * Material DesignのTheme colorを設定します。
   * @param color - Theme colorの名前
   */
  setColor(color: string): void {
    this.awagConfig.set(ConfigItem.COLOR, color);
  }

  /**
   * @description
   * コンパクト表示状態を確認します。
   * @returns コンパクト表示状態
   */
  isCompactView(): boolean {
    return this._isCompactView;
  }

  /**
   * @description
   * コンパクト表示状態を変更します。
   * @param {boolean} toCompact コンパクト表示状態
   */
  changeCompactView(toCompact: boolean) {
    this.getConfig().set(ConfigItem.COMPACT, toCompact);
    this._isCompactView = toCompact;
    const action = toCompact ? 'add' : 'remove';
    document.body.classList[action]('awag-sm', 'awag-input-group');
    document.querySelectorAll('form').forEach(form => {
      form.classList[action]('awag-sm', 'awag-input-group');
    });
  }

}
