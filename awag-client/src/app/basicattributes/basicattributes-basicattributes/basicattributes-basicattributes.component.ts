/* Generated by AWAG */
import { OnInit, AfterViewInit, AfterViewChecked, OnDestroy, Directive } from '@angular/core';
import { NgModel } from '@angular/forms';
import { Router } from '@angular/router';
import { TranslateService } from '@ngx-translate/core';

import { AWAG_COMMON_MESSAGES } from '../../awag/awag-common-messages'; // NOSONAR

import { AwagBaseComponent } from '../../awag/awag-base.component';
import { AwagCommonService } from '../../awag/awag-common.service';
import { AwagContextService } from '../../awag/awag-context.service';
import { AwagLoggerService } from '../../awag/logger/awag-logger.service';
import { AwagAlertService } from '../../awag/alert/service/awag-alert.service';
import { AwagLanguageSupportService } from '../../awag/language-support/awag-language-support.service';
import { AppNameValueService } from '../../app-namevalue.service';
import { AppCommonService } from '../../common/app-common.service';

import { AwagListController } from '../../awag/awag-listcontroller';
import { AwagVisibilityService, AwagVisibilityConfig, AwagVisibilityState } from '../../awag/awag-visibility.service';
import { ROLE_BASED_VISIBILITY } from './basicattributes-basicattributes-config';
import { MatDialog } from "@angular/material/dialog";
import { ContactHistoryComponent } from "../../maintenance/contact-history/contact-history.component";

/**
 * @description
 * Screen component
 * メニュー：Basicattributes (基本属性)
 * 画面：Basicattributes (基本属性)
 * @extends {AwagBaseComponent}
 * @implements {OnInit}
 * @implements {AfterViewInit}
 */
@Directive()
export class BasicattributesBasicattributesComponent extends AwagBaseComponent implements OnInit, AfterViewInit, AfterViewChecked, OnDestroy {

  /**
   * Providers definition for @Component annotation.
   */
  static readonly providers: any[] = [
  ];

  /**
   * NgModel管理マップ
   */
  ngModelMap: { [key: string]: NgModel | undefined } = {};

  /**
   * ListController for list (特記事項一覧)
   */
  listListCtrl!: AwagListController;

  /**
   * selectedKey for list (特記事項一覧)
   */
  listSelected: any = null;

  /**
   * 活性表示・非活性表示・非表示制御設定
   */
  visibilityConfig: AwagVisibilityConfig;

  /**
   * @constructor
   * @param {Router} router
   * @param {AwagCommonService} awagCommon
   * @param {AwagContextService} awagContext
   * @param {AwagLoggerService} awagLogger
   * @param {AwagAlertService} awagAlert
   * @param {AwagLanguageSupportService} awagLanguageSupport
   * @param {AppNameValueService} appNameValue
   * @param {AppCommonService} appCommon
   * @param {TranslateService} translate
   * @param {AwagVisibilityService} visibilityService
   */
  constructor(
    protected override router: Router,
    protected override awagCommon: AwagCommonService,
    protected override awagContext: AwagContextService,
    protected override awagLogger: AwagLoggerService,
    protected override awagAlert: AwagAlertService,
    protected override awagLanguageSupport: AwagLanguageSupportService,
    protected appNameValue: AppNameValueService,
    protected appCommon: AppCommonService,
    protected translate: TranslateService,
    protected visibilityService: AwagVisibilityService,
    protected dialog: MatDialog,
  ) {
    super(router, awagCommon, awagContext, awagLogger, awagAlert, awagLanguageSupport);
    this.awagContext.setScreenKey('basicattributes_basicattributes');
    if (this.awagContext.getModalContext() == null) {
      this.subscription.add(this.translate.get('awag.prj.uc.basicattributes.sc.basicattributes.name').subscribe((res: string) => window.document.title = res));
    }
    this.appNameValueInit();
    this.subscription.add(this.translate.onLangChange.subscribe(() => this.awagOnLangChange()));
    this.visibilityConfig = this.visibilityService.getVisibilityConfig(ROLE_BASED_VISIBILITY, this.awagContext.getUser().getUserRoles());
  }

  /**
   * @description
   * 対象セクションの項目を非表示にすべきかどうかを判定します。
   * @param sectionName セクション名
   * @param [itemId=null] 項目ID
   * @returns 非表示にすべき項目である場合には`true`を返します
   */
  override isVisibilityHidden(sectionName: string, itemId: string | null = null): boolean {
    itemId = itemId ?? '*'; // itemId欄が*の場合はセクションを制御
    const visibilityState = (this.visibilityConfig[sectionName][itemId] ?? AwagVisibilityState.Undefined);
    return (visibilityState == AwagVisibilityState.Hidden) || super.isVisibilityHidden(sectionName, itemId);
  }

  /**
   * @description
   * 対象セクションの項目を非活性表示にすべきかどうかを判定します。
   * @param sectionName セクション名
   * @param [itemId=null] 項目ID
   * @returns 非活性表示にすべき項目である場合には`true`を返します
   */
  override isVisibilityInactive(sectionName: string, itemId: string | null = null): boolean {
    itemId = itemId ?? '*'; // itemId欄が*の場合はセクションを制御
    const visibilityState = (this.visibilityConfig[sectionName]['*'] ?? this.visibilityConfig[sectionName][itemId] ?? AwagVisibilityState.Undefined);
    return (visibilityState == AwagVisibilityState.Inactive) || super.isVisibilityInactive(sectionName, itemId);
  }

  /**
   * @description
   * OnInit lifecycle hook.
   */
  ngOnInit() {
    this.awagOnInit();
    this.model = this.getModelOnInit('basicattributes_basicattributes');
    this.showError(this.getErrorOnInit());
    if (this.model.search === undefined) {
      this.model.search = {
        _inclusiveor: 'false'
      };
    }
    this.model.search.namekanji = '豊田 太郎';
    this.model.search.namekana = 'ﾄﾖﾀ ﾀﾛｳ';
    this.model.search.nameromaji = 'TOYOTA TARO';
    this.model.search.gender = '男';
    this.model.search.customerno = '123-4567-89012';
    this.model.search.contractno = '123-3456-6789-1231';
    this.model.search.servicename = 'TS CUBICカード レギュラー';
    this.model.search.homepost = '999-999';
    this.model.search.hometel = '052-123-4567';
    this.model.search.warningstatus = '注意ステータス';
    this.model.search.homeaddr = '愛知県名古屋市西区牛島町3-3-3愛知県名古屋市西区牛島町3-3-3';
    this.model.search.phone = '080-1230-4567';
    this.model.search.customerproperty = '顧客特性';
    this.model.search.homekana = 'ｱｲﾁｹﾝ ﾅｺﾞﾔｼ ﾆｼｸ ｳｼｼﾞﾏﾁｮｳ3-3-3ｱｲﾁｹﾝ ﾅｺﾞﾔｼ ﾆｼｸ ｳｼｼﾞﾏﾁｮｳ3-3-3';
    this.model.search.birthday = '平成07(1995)年01月01日';
    this.model.search.specialnote = '特記事項';
    this.model.search.otheraddr = '有';
    this.model.search.honnin = '本人';
    this.model.search.hon_gencard = '1,001';
    this.model.search.hon_kakocard = '1,001';
    this.model.search.hon_genkabu = '1,001';
    this.model.search.hon_kokabu = '1,001';
    this.model.search.hon_genshoro = '1,001';
    this.model.search.hon_kakoshoro = '1,001';
    this.model.search.hon_yoshin = '1,001';
    this.model.search.sonota = 'その他';
    this.model.search.ta_gencard = '2,001';
    this.model.search.ta_kakocard = '2,001';
    this.model.search.ta_genkabu = '2,001';
    this.model.search.ta_kokabu = '2,001';
    this.model.search.ta_genshoro = '2,001';
    this.model.search.ta_kakoshoro = '2,001';
    this.model.search.ta_yoshin = '2,001';
    this.model.search.eto = '亥';
    this.model.search.age = '30';
    this.model.search.fax = '052-123-4567';
    this.model.search.workname = 'トヨタファイナンス株式会社';
    this.model.search.worktel = '054-456-6788';
    this.model.search.workpost = '451-6014';
    this.model.search.workaddr = '秋田県北秋田郡上小阿仁村大字沖田面字小蒲野下タ川原 シャルマンフジビルト・モアー住之江公園駅前アーバンヴィレッジ 305号室';
    this.model.search.workaddrkana = 'ｱｷﾀｹﾝ ｷﾀｱｷﾀｸﾞﾝ ｶﾐｺｱﾆﾑﾗ ｵｵｱｻﾞ ｵｷﾀｵﾓﾃ ｱｻﾞ ｺｶﾊﾞﾉ ｼﾓﾀｶﾞﾜﾗｼｬﾙﾏﾝﾌｼﾞﾋﾞﾙﾄ･ﾓｱｰ ｽﾐﾉｴｺｳｴﾝｴｷﾏｴ ｱｰﾊﾞﾝｳﾞｨﾚｯｼﾞ 305ｺﾞｳｼﾂ';

    let lists = [];
    let i: number;
    
    let list: { [key: string]: any } = {};
    list['category'] = '債権買取';
    list['contractNo'] = '200-2000-2000-2000'
    list['reflectDate'] = '2023/12/20';
    list['storageTime'] =  '2023/12/20';
    list['comment'] =  '４００文字行テキストテキストテキストテキストテキストテキストテキストテキストテキストテキストテキストテキストテキストテキストテキスト';
    lists.push({...list});
    list['category'] = 'ながらく';
    list['contractNo'] = '123-3456-6789-1231'
    list['reflectDate'] = '2023/12/20';
    list['storageTime'] =  '2023/12/20';
    list['comment'] =  'テキストテキストテキストテキストテキストテキストテキスト';
    lists.push({...list});
    list['category'] = '高齢者向け途中返却可能商品';
    list['contractNo'] = '100-1000-1000-1000'
    list['reflectDate'] = '2023/12/20';
    list['storageTime'] =  '2023/12/20';
    list['comment'] =  'テキストテキストテキストテキストテキストテキストテキスト \nテキストテキストテキストテキストテキストテキストテキスト';
    lists.push({...list});
    for (i = 1; i < 10; i++) {
         list['category'] = '重要加盟店';
        list['contractNo'] = '200-2000-2000-201' + i; 
        list['reflectDate'] = '2023/12/20';
        list['storageTime'] =  '2023/12/20';
        list['comment'] =  '４００文字行テキストテキストテキストテキストテキストテキストテキストテキストテキストテキストテキストテキストテキストテキスト';
        lists.push({...list});

    }
    this.model.list = lists;
    this.model.search.delay = 1;
    this.model.search.warningstatusStatic = 1;
    this.model.search.inadequateAccount = 1;
    this.model.search.addressNotArrived = 1;
    this.model.search.cardRenewal = 1;
    this.model.search.suspensionUse = 1;
    this.model.search.death = 1;
    this.model.search.other = 1;
    this.model.search.attentionContact = 1;
    this.model.search.vip = 1;
    this.model.search.name = 1;
    this.model.search.nameSeparation = 1;

    this.model.search.hearing = 1;
    this.model.search.specialRes = 3

    if (this.model.search.hearing == 1) {
        this.model.search.hearing = '耳が遠い';
     }  else if (this.model.search.hearing == 2) {
        this.model.search.hearing = '耳が聞こえない';
     }
    

     if (this.model.search.specialRes == 1) {
        this.model.search.specialRes = 'クレーマー';
     }  else if (this.model.search.specialRes == 2) {
        this.model.search.specialRes = '特殊団体';
     }  else if (this.model.search.specialRes == 3) {
        this.model.search.specialRes = 'その他要注意顧客';
     }

    this.model.search.cancelCallReg = 1;
    this.model.search.cancelMailReg = 1;
    this.model.search.noWebGuidance = 1;
    this.model.search.emailRes = 1;

    this.listListCtrl ??= new AwagListController(this.model.list, null);
    this.awagContext.setVModel('basicattributes_basicattributes', this.model);
    this.appOnInit();
  }

  /**
   * @description
   * OnInit ライフサイクル処理
   */
  appOnInit() {
    // 必要に応じてカスタムコンポーネントでオーバーライド
  }

  /**
   * @description
   * AfterViewInit lifecycle hook.
   */
  ngAfterViewInit() {
    this.awagAfterViewInit();
    this.appAfterViewInit();
  }

  /**
   * @description
   * AfterViewInit ライフサイクル処理
   */
  appAfterViewInit() {
    // 必要に応じてカスタムコンポーネントでオーバーライド
  }

  /**
   * @description
   * AfterViewChecked lifecycle hook.
   */
  ngAfterViewChecked() {
    this.awagAfterViewChecked();
    this.appAfterViewChecked();
  }

  /**
   * @description
   * AfterViewChecked ライフサイクル処理
   */
  appAfterViewChecked() {
    // 必要に応じてカスタムコンポーネントでオーバーライド
  }

  /**
   * @description
   * OnDestroy lifecycle hook.
   */
  ngOnDestroy() {
    this.appOnDestroy();
    this.awagOnDestroy();
  }

  /**
   * @description
   * OnDestroy ライフサイクル処理
   */
  appOnDestroy() {
    // 必要に応じてカスタムコンポーネントでオーバーライド
  }

  /**
   * @description
   * Code value initialization.
   * @param {?boolean} refresh Whether to refresh and retrieve code values.
   */
  protected appNameValueInit(refresh?: boolean) {
    // Name value
  }

  /**
   * @description
   * Process on LangChange event.
   */
  protected awagOnLangChange() {
    this.awagAlert.clearAlerts();
    this.subscription.add(this.translate.get('awag.prj.uc.basicattributes.sc.basicattributes.name').subscribe((res: string) => window.document.title = res));
    this.appNameValueInit(true);
    this.awagAfterViewInit();
  }

  /**
   * @description
   * Sort given list.
   * @param list {AwagListController} sort target
   * @param name {string} sort key
   */
  sortList(list: AwagListController, name: string) {
    list.sortList(name);
    this.awagAfterViewInit();
  }

  /**
   * @description
   * Event handling for awagReset.
   */
  awagReset() {
    (document.querySelectorAll('[name="awagOptionOr"]')[0] as HTMLInputElement).checked = true;
    this.model.search = {
      _inclusiveor: 'false'
    };
    this.awagAfterViewInit();
    setTimeout(() => this.resetChecked());
  }

  /**
   * @description
   * 表内のチェックボックスをチェック時にモデルの値と全選択チェックボックスの状態を更新します。
   * @param item 行オブジェクト
   * @param name 項目名
   * @param object チェックボックスの状態またはchecked, checkValue, uncheckValueを保持するオブジェクト
   * @param checkValue チェック状態の値
   * @param uncheckValue 非チェック状態の値
   */
  listCheck(item: any, name: string, object: any, checkValue: any = undefined, uncheckValue: any = undefined) {
    let checked = object;
    if (checkValue == undefined && uncheckValue == undefined) {
      checked = object.checked;
      checkValue = object.checkValue;
      uncheckValue = object.uncheckValue;
    }
    item[name] = checked ? checkValue : uncheckValue;
    this.listListCtrl.updateCheckAll(name, checkValue);
  }

  /**
   * @description
   * Event handling for attributeList (属性一覧(口座・送付先）)
   */
  attributeList() {
    this.awagContext.setVModel('basicattributes_basicattributes', this.model);
    // self screen event
    this.model = this.attributeListCustomLogic(this.model);
    this.awagAfterViewInit();
  }

  /**
   * @description
   * Custom logic for attributeList (属性一覧(口座・送付先）)
   * @param {*} model Model data of screen
   * @returns Edited model data
   */
  protected attributeListCustomLogic(model: any) { return model; }

   dialogWindow: Window | null = null;
  /**
   * @description
   * Event handling for contactList (コンタクト一覧)
   */
  contactList() {
    this.awagContext.setVModel('basicattributes_basicattributes', this.model);
    const currentUrl = new URL(location.href);
    let nextUrl : any;
    nextUrl = new URL(currentUrl.origin + "/contact/contacthistory/contacthistory");
    // self screen event
    const left = window.screenX + (window.outerWidth - 1008) / 2;
    const top = window.screenY + (window.outerHeight - 672) / 2;

    const features = `width=${1008},height=${672},left=${left},top=${top},resizable=yes,scrollbars=yes`;

    if (this.dialogWindow == null || this.dialogWindow.closed) {
      this.dialogWindow = window.open(nextUrl.href, '_blank', features);
    } else {
      this.dialogWindow.focus();
    }

    this.model = this.contactListCustomLogic(this.model);
    this.awagAfterViewInit();
  }

  /**
   * @description
   * Custom logic for contactList (コンタクト一覧)
   * @param {*} model Model data of screen
   * @returns Edited model data
   */
  protected contactListCustomLogic(model: any) { return model; }

  /**
   * @description
   * Event handling for contactRegister (コンタクト登録)
   */
  contactRegister() {
    this.awagContext.setVModel('basicattributes_basicattributes', this.model);
    // self screen event
    this.model = this.contactRegisterCustomLogic(this.model);
    this.awagAfterViewInit();
  }

  /**
   * @description
   * Custom logic for contactRegister (コンタクト登録)
   * @param {*} model Model data of screen
   * @returns Edited model data
   */
  protected contactRegisterCustomLogic(model: any) { return model; }

  /**
   * @description
   * Event handling for contractList (契約一覧)
   */
  contractList() {
    this.awagContext.setVModel('basicattributes_basicattributes', this.model);
    // self screen event
    this.model = this.contractListCustomLogic(this.model);
    this.awagAfterViewInit();
  }

  /**
   * @description
   * Custom logic for contractList (契約一覧)
   * @param {*} model Model data of screen
   * @returns Edited model data
   */
  protected contractListCustomLogic(model: any) { return model; }

  /**
   * @description
   * Event handling for creditScore (信用コード一覧)
   */
  creditScore() {
    this.awagContext.setVModel('basicattributes_basicattributes', this.model);
    // self screen event
    this.model = this.creditScoreCustomLogic(this.model);
    this.awagAfterViewInit();
  }

  /**
   * @description
   * Custom logic for creditScore (信用コード一覧)
   * @param {*} model Model data of screen
   * @returns Edited model data
   */
  protected creditScoreCustomLogic(model: any) { return model; }

  /**
   * @description
   * Event handling for customerCharacterReg (顧客特性登録)
   */
  customerCharacterReg() {
    this.awagContext.setVModel('basicattributes_basicattributes', this.model);
    // self screen event
    this.model = this.customerCharacterRegCustomLogic(this.model);
    this.awagAfterViewInit();
  }

  /**
   * @description
   * Custom logic for customerCharacterReg (顧客特性登録)
   * @param {*} model Model data of screen
   * @returns Edited model data
   */
  protected customerCharacterRegCustomLogic(model: any) { return model; }

  /**
   * @description
   * Event handling for dispatch1 (発信先連携)
   */
  dispatch1() {
    this.awagContext.setVModel('basicattributes_basicattributes', this.model);
    // self screen event
    this.model = this.dispatch1CustomLogic(this.model);
    this.awagAfterViewInit();
  }

  /**
   * @description
   * Custom logic for dispatch1 (発信先連携)
   * @param {*} model Model data of screen
   * @returns Edited model data
   */
  protected dispatch1CustomLogic(model: any) { return model; }

  /**
   * @description
   * Event handling for dispatch2 (発信先連携)
   */
  dispatch2() {
    this.awagContext.setVModel('basicattributes_basicattributes', this.model);
    // self screen event
    this.model = this.dispatch2CustomLogic(this.model);
    this.awagAfterViewInit();
  }

  /**
   * @description
   * Custom logic for dispatch2 (発信先連携)
   * @param {*} model Model data of screen
   * @returns Edited model data
   */
  protected dispatch2CustomLogic(model: any) { return model; }

  /**
   * @description
   * Event handling for dispatch3 (発信先連携)
   */
  dispatch3() {
    this.awagContext.setVModel('basicattributes_basicattributes', this.model);
    // self screen event
    this.model = this.dispatch3CustomLogic(this.model);
    this.awagAfterViewInit();
  }

  /**
   * @description
   * Custom logic for dispatch3 (発信先連携)
   * @param {*} model Model data of screen
   * @returns Edited model data
   */
  protected dispatch3CustomLogic(model: any) { return model; }

  /**
   * @description
   * Event handling for experienceAxis (体験軸)
   */
  experienceAxis() {
    this.awagContext.setVModel('basicattributes_basicattributes', this.model);
    // self screen event
    this.model = this.experienceAxisCustomLogic(this.model);
    this.awagAfterViewInit();
  }

  /**
   * @description
   * Custom logic for experienceAxis (体験軸)
   * @param {*} model Model data of screen
   * @returns Edited model data
   */
  protected experienceAxisCustomLogic(model: any) { return model; }

  /**
   * @description
   * Event handling for functionalAxis (機能軸)
   */
  functionalAxis() {
    this.awagContext.setVModel('basicattributes_basicattributes', this.model);
    // self screen event
    this.model = this.functionalAxisCustomLogic(this.model);
    this.awagAfterViewInit();
  }

  /**
   * @description
   * Custom logic for functionalAxis (機能軸)
   * @param {*} model Model data of screen
   * @returns Edited model data
   */
  protected functionalAxisCustomLogic(model: any) { return model; }

  /**
   * @description
   * Event handling for select (選択)
   * @param {number} index Index of selected row
   * @param {*} item Model data of selected item
   */
  select(index: number, item: any) {
    this.awagContext.setVModel('basicattributes_basicattributes', this.model);
    // self screen event
    this.model = this.selectCustomLogic(this.model, index, item);
    this.awagAfterViewInit();
    
    this.dialog.open(ContactHistoryComponent, {});
  }

  /**
   * @description
   * Custom logic for select (選択)
   * @param {*} model Model data of screen
   * @param {number} index Index of selected row
   * @param {*} item Model data of selected item
   * @returns Edited model data of selected item
   */
  protected selectCustomLogic(model: any, index: number, item: any) { return item; }

  /**
   * @description
   * Event handling for specialNoteReg (特記事項登録)
   * @param {number} index Index of selected row
   * @param {*} item Model data of selected item
   */
  specialNoteReg() {
    this.awagContext.setVModel('basicattributes_basicattributes', this.model);
    // self screen event
    this.model = this.specialNoteRegCustomLogic(this.model);
    this.awagAfterViewInit();
  }

  /**
   * @description
   * Custom logic for specialNoteReg (特記事項登録)
   * @param {*} model Model data of screen
   * @returns Edited model data
   */
  protected specialNoteRegCustomLogic(model: any) { return model; }

  /**
   * @description
   * Event handling for switchbutton (本人/家族切替)
   * @param {number} index Index of selected row
   * @param {*} item Model data of selected item
   */
  switchbutton() {
    this.awagContext.setVModel('basicattributes_basicattributes', this.model);
    // self screen event
    this.model = this.switchbuttonCustomLogic(this.model);
    this.awagAfterViewInit();
  }

  /**
   * @description
   * Custom logic for switchbutton (本人/家族切替)
   * @param {*} model Model data of screen
   * @returns Edited model data
   */
  protected switchbuttonCustomLogic(model: any) { return model; }

  /**
   * @description
   * Event handling for updatebutton (最新情報に更新)
   * @param {number} index Index of selected row
   * @param {*} item Model data of selected item
   */
  updatebutton() {
    this.awagContext.setVModel('basicattributes_basicattributes', this.model);
    // self screen event
    this.model = this.updatebuttonCustomLogic(this.model);
    this.awagAfterViewInit();
  }

  /**
   * @description
   * Custom logic for updatebutton (最新情報に更新)
   * @param {*} model Model data of screen
   * @returns Edited model data
   */
  protected updatebuttonCustomLogic(model: any) { return model; }
}
