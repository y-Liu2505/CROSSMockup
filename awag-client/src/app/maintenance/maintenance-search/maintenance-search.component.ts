/* Generated by AWAG */
import { OnInit, AfterViewInit, AfterViewChecked, OnDestroy, Directive, ViewChild, ɵsetInjectorProfilerContext } from '@angular/core';

// liu-mod 20250822 PRJ標準確認事項：ハイフン有無許容
// import { NgModel } from '@angular/forms';
import { NgModel, FormControl, NgForm } from '@angular/forms';

import { Router } from '@angular/router';
import { TranslateService } from '@ngx-translate/core';

import { AWAG_COMMON_MESSAGES } from '../../awag/awag-common-messages'; // NOSONAR

import { AwagBaseComponent } from '../../awag/awag-base.component';
import { AwagCommonService } from '../../awag/awag-common.service';
import { AwagContextService } from '../../awag/awag-context.service';
import { AwagLoggerService } from '../../awag/logger/awag-logger.service';
import { AwagAlertService } from '../../awag/alert/service/awag-alert.service';
import { AwagLanguageSupportService } from '../../awag/language-support/awag-language-support.service';
import { AppNameValueService } from '../../app-namevalue.service';
import { MaintenanceSearchAwagSearchCustomService } from './service/maintenance-search-awagsearch-custom.service';
import { AppCommonService } from '../../common/app-common.service';

import { AwagError } from '../../awag/awag-error'; // NOSONAR
import { AwagListController } from '../../awag/awag-listcontroller';
import { AwagSubContext } from '../../awag/awag-subcontext';
import { AwagVisibilityService, AwagVisibilityConfig, AwagVisibilityState } from '../../awag/awag-visibility.service';
import { ROLE_BASED_VISIBILITY } from './maintenance-search-config';

import { UserService, User } from './../../user.service';
import { ContractnoService, } from './../../contractno.service';

import { ContractListService} from './../../contracList.service';

import { forkJoin, from } from 'rxjs';
import { JpPhoneFormatPipe } from '../../jp-phone-format.pipe'
import { HyphenFormatPipe } from '../../hyphun-format.pipe'
import { MatSnackBar } from '@angular/material/snack-bar';

// liu-add 20250825 PRJ標準確認事項：文字のツールチップ表示
import { MatDialog } from "@angular/material/dialog";
import { ContactHistoryComponent } from "../../maintenance/contact-history/contact-history.component";
import { AwagConfirmModalComponent } from '../../awag/modal/awag-confirm-modal.component';
import { ContractHistoryService } from '../../contacthistory.service';
import { ReferenceInputComponent } from "../../maintenance/referenceInput/referenceInput.component";

/**
 * @description
 * Screen component
 * メニュー：Maintenance (顧客検索)
 * 画面：Search (顧客検索)
 * @extends {AwagBaseComponent}
 * @implements {OnInit}
 * @implements {AfterViewInit}
 */
@Directive()
export class MaintenanceSearchComponent extends AwagBaseComponent implements OnInit, AfterViewInit, AfterViewChecked, OnDestroy {

  /**
   * Providers definition for @Component annotation.
   */
  static readonly providers: any[] = [
    MaintenanceSearchAwagSearchCustomService,
  ];

  /**
   * NgModel管理マップ
   */
  ngModelMap: { [key: string]: NgModel | undefined } = {};

  /**
   * code list for 顧客区分
   */
  customerClassCode: any[] = [];

  /**
   * code list for 生年月日
   */
  yearOptsCode: any[] = [];

  /**
   * code list for 地区
   */
  areaOptsCode: any[] = [];

  /**
   * code list for 選択
   */
  provinceOptsCode: any[] = [];

  /**
   * code list for 選択
   */
  callnameselect1Code: any[] = [];

  /**
   * code list for 検索パターン
   */
  searchPaternsCode: any[] = [];
  searchPaternsCodeOrigin: any[] = [];

  /**
   * code list for 地区
   */
  areaCheckCode: any[] = [];

  /**
   * code list for 法人名
   */
  searchOptsCode: any[] = [];

  /**
   * ListController for list (お客様一覧)
   */
  listListCtrl!: AwagListController;

  /**
   * selectedKey for list (お客様一覧)
   */
  listSelected: any = null;

  /**
   * ListController for list1 (契約数情報)
   */
  list1ListCtrl!: AwagListController;

  /**
   * selectedKey for list1 (契約数情報)
   */
  list1Selected: any = null;

  /**
   * ListController for list2 (カード)
   */
  list2ListCtrl!: AwagListController;

  /**
   * selectedKey for list2 (カード)
   */
  list2Selected: any = null;

  /**
   * ListController for list3 (割賦)
   */
  list3ListCtrl!: AwagListController;

  /**
   * selectedKey for list3 (割賦)
   */
  list3Selected: any = null;

  /**
   * ListController for list4 (割賦(ｳｨｽﾞﾘ))
   */
  list4ListCtrl!: AwagListController;

  /**
   * selectedKey for list4 (割賦(ｳｨｽﾞﾘ))
   */
  list4Selected: any = null;

  /**
   * ListController for list5 (証書ロ)
   */
  list5ListCtrl!: AwagListController;

  /**
   * selectedKey for list5 (証書ロ)
   */
  list5Selected: any = null;

  /**
   * ListController for list6 (与信)
   */
  list6ListCtrl!: AwagListController;

  /**
   * selectedKey for list6 (与信)
   */
  list6Selected: any = null;

  /**
   * 活性表示・非活性表示・非表示制御設定
   */
  visibilityConfig: AwagVisibilityConfig;

  isHoujinBool = false;

  // liu-add 20250822 PRJ標準確認事項：ハイフン有無許容
  cardNoControl = new FormControl('');
  /**
   * ListController for list7
   */
  list7ListCtrl!: AwagListController;

  /**
   * selectedKey for list7
   */
  list7Selected: any = null;
  
  /**
   * code list for チャネル種別
   */
  chanelOptCode: any[] = [];

  /**
   * @constructor
   * @param {Router} router
   * @param {AwagCommonService} awagCommon
   * @param {AwagContextService} awagContext
   * @param {AwagLoggerService} awagLogger
   * @param {AwagAlertService} awagAlert
   * @param {AwagLanguageSupportService} awagLanguageSupport
   * @param {AppNameValueService} appNameValue
   * @param {AppCommonService} appCommon
   * @param {TranslateService} translate
   * @param {AwagVisibilityService} visibilityService
   * @param {MaintenanceSearchAwagSearchCustomService} awagSearchService
   */
  constructor(
    protected override router: Router,
    protected override awagCommon: AwagCommonService,
    protected override awagContext: AwagContextService,
    protected override awagLogger: AwagLoggerService,
    protected override awagAlert: AwagAlertService,
    protected override awagLanguageSupport: AwagLanguageSupportService,
    protected appNameValue: AppNameValueService,
    protected appCommon: AppCommonService,
    protected translate: TranslateService,
    protected visibilityService: AwagVisibilityService,
    protected awagSearchService: MaintenanceSearchAwagSearchCustomService,
    private readonly userService: UserService,
    private readonly contractnoService: ContractnoService,
    private readonly contractListService: ContractListService,
    private jpPhoneFormatPipe: JpPhoneFormatPipe,
    private hyphenFormatPipe : HyphenFormatPipe,
    private snackBar: MatSnackBar,
    private dialog: MatDialog,
    protected contractHistoryService: ContractHistoryService,
  ) {
    super(router, awagCommon, awagContext, awagLogger, awagAlert, awagLanguageSupport);
    this.awagContext.setScreenKey('maintenance_search');
    if (this.awagContext.getModalContext() == null) {
      this.subscription.add(this.translate.get('顧客検索（個人）-CROSS').subscribe((res: string) => window.document.title = res));
    }
    this.appNameValueInit();
    this.subscription.add(this.translate.onLangChange.subscribe(() => this.awagOnLangChange()));
    this.visibilityConfig = this.visibilityService.getVisibilityConfig(ROLE_BASED_VISIBILITY, this.awagContext.getUser().getUserRoles());
  }

  /**
   * @description
   * 対象セクションの項目を非表示にすべきかどうかを判定します。
   * @param sectionName セクション名
   * @param [itemId=null] 項目ID
   * @returns 非表示にすべき項目である場合には`true`を返します
   */
  override isVisibilityHidden(sectionName: string, itemId: string | null = null): boolean {
    itemId = itemId ?? '*'; // itemId欄が*の場合はセクションを制御
    const visibilityState = (this.visibilityConfig[sectionName][itemId] ?? AwagVisibilityState.Undefined);
    return (visibilityState == AwagVisibilityState.Hidden) || super.isVisibilityHidden(sectionName, itemId);
  }

  /**
   * @description
   * 対象セクションの項目を非活性表示にすべきかどうかを判定します。
   * @param sectionName セクション名
   * @param [itemId=null] 項目ID
   * @returns 非活性表示にすべき項目である場合には`true`を返します
   */
  override isVisibilityInactive(sectionName: string, itemId: string | null = null): boolean {
    itemId = itemId ?? '*'; // itemId欄が*の場合はセクションを制御
    const visibilityState = (this.visibilityConfig[sectionName]['*'] ?? this.visibilityConfig[sectionName][itemId] ?? AwagVisibilityState.Undefined);
    return (visibilityState == AwagVisibilityState.Inactive) || super.isVisibilityInactive(sectionName, itemId);
  }

  /**
   * @description
   * OnInit lifecycle hook.
   */
  

  users: User[] = [];

  ngOnInit() {
    this.awagOnInit();
    this.model = this.getModelOnInit('maintenance_search');
    this.showError(this.getErrorOnInit());
    if (this.model.search === undefined) {
      this.model.search = {
        _inclusiveor: 'false',
        _awag_areaCheck: this.areaCheckCode[1].value,
        areaCheck: this.areaCheckCode[1].value,
        searchopts: this.searchOptsCode[0].value
      };
    }
    this.listListCtrl ??= new AwagListController(this.model.list, null);
    this.list2ListCtrl ??= new AwagListController(this.model.list2, null);
    this.list3ListCtrl ??= new AwagListController(this.model.list3, null);
    this.list4ListCtrl ??= new AwagListController(this.model.list4, null);
    this.list5ListCtrl ??= new AwagListController(this.model.list5, null);
    this.list6ListCtrl ??= new AwagListController(this.model.list6, null);
    this.list1ListCtrl ??= new AwagListController(this.model.list1, null);
    this.list7ListCtrl ??= new AwagListController(this.model.list7, null);
    // Todo check why to set again list here
    this.model.list = [];
    this.model.search.customerclass = '0';
    this.awagContext.setVModel('maintenance_search', this.model);
    this.appOnInit();
  }

  /**
   * @description
   * OnInit ライフサイクル処理
   */
  appOnInit() {
    // 必要に応じてカスタムコンポーネントでオーバーライド
  }

  /**
   * @description
   * AfterViewInit lifecycle hook.
   */
  ngAfterViewInit() {
    this.awagAfterViewInit();
    this.appAfterViewInit();
  }

  /**
   * @description
   * AfterViewInit ライフサイクル処理
   */
  appAfterViewInit() {
    // 必要に応じてカスタムコンポーネントでオーバーライド
  }

  /**
   * @description
   * AfterViewChecked lifecycle hook.
   */
  ngAfterViewChecked() {
    this.awagAfterViewChecked();
    this.appAfterViewChecked();
  }

  /**
   * @description
   * AfterViewChecked ライフサイクル処理
   */
  appAfterViewChecked() {
    // 必要に応じてカスタムコンポーネントでオーバーライド
  }

  /**
   * @description
   * OnDestroy lifecycle hook.
   */
  ngOnDestroy() {
    this.appOnDestroy();
    this.awagOnDestroy();
  }

  /**
   * @description
   * OnDestroy ライフサイクル処理
   */
  appOnDestroy() {
    // 必要に応じてカスタムコンポーネントでオーバーライド
  }

  /**
   * @description
   * Code value initialization.
   * @param {?boolean} refresh Whether to refresh and retrieve code values.
   */
  protected appNameValueInit(refresh?: boolean) {
    // Name value
    this.awagLanguageSupport.getNameValueTranslated(this.appNameValue.customerClass, this.customerClassCode);
    this.awagLanguageSupport.getNameValueTranslated(this.appNameValue.yearOpts, this.yearOptsCode);
    this.awagLanguageSupport.getNameValueTranslated(this.appNameValue.areaOpts, this.areaOptsCode);
    this.awagLanguageSupport.getNameValueTranslated(this.appNameValue.provinceOpts, this.provinceOptsCode);
    this.awagLanguageSupport.getNameValueTranslated(this.appNameValue.callnameselect1, this.callnameselect1Code);
    this.awagLanguageSupport.getNameValueTranslated(this.appNameValue.searchPaterns, this.searchPaternsCode);
    this.awagLanguageSupport.getNameValueTranslated(this.appNameValue.areaCheck, this.areaCheckCode);
    this.awagLanguageSupport.getNameValueTranslated(this.appNameValue.searchOpts, this.searchOptsCode);
    this.searchPaternsCodeOrigin = this.searchPaternsCode; //Chinh-add
    this.provinceOptsCode = [];//Chinh-add
    this.searchPaternsCode = []; //Chinh-add
    this.awagLanguageSupport.getNameValueTranslated(this.appNameValue.chanelOpt, this.chanelOptCode);
  }

  /**
   * @description
   * Process on LangChange event.
   */
  protected awagOnLangChange() {
    this.awagAlert.clearAlerts();
    this.subscription.add(this.translate.get('awag.prj.uc.maintenance.sc.search.name').subscribe((res: string) => window.document.title = res));
    this.appNameValueInit(true);
    this.awagAfterViewInit();
  }

  /**
   * @description
   * change page size
   * @param list {AwagListController} pagination target
   * @param pageSize {number} page size
   * @param target {string} element id of the target
   */
  changelen(list: AwagListController, pageSize: number, target: string | null = null) {
    list.changelen(pageSize);
    if (target) {
      (document.getElementById(target) as HTMLElement)?.focus();
    }
    this.awagAfterViewInit();
  }

  /**
   * @description
   * Paginate given list.
   * @param list {AwagListController} pagination target
   * @param page {number} page number
   * @param target {string} element id of the target
   */
  paginate(list: AwagListController, page: number, target: string | null = null) {
    if (typeof page !== 'number') {
      page = parseInt(page, 10);
    }
    list.paginate(page);
    if (target) {
      (document.getElementById(target) as HTMLElement)?.focus();
    }
    this.awagAfterViewInit();
  }

  /**
   * @description
   * Sort given list.
   * @param list {AwagListController} sort target
   * @param name {string} sort key
   */
  sortList(list: AwagListController, name: string) {
    list.sortList(name);
    this.awagAfterViewInit();
  }

  /**
   * @description
   * Event handling for awagReset.
   */
  awagReset() {
    (document.querySelectorAll('[name="awagOptionOr"]')[0] as HTMLInputElement).checked = true;
    this.model.search = {
      _inclusiveor: 'false'
    };
    this.awagAfterViewInit();
    setTimeout(() => this.resetChecked());
  }

  /**
   * @description
   * 表内のチェックボックスをチェック時にモデルの値と全選択チェックボックスの状態を更新します。
   * @param item 行オブジェクト
   * @param name 項目名
   * @param object チェックボックスの状態またはchecked, checkValue, uncheckValueを保持するオブジェクト
   * @param checkValue チェック状態の値
   * @param uncheckValue 非チェック状態の値
   */
  listCheck(item: any, name: string, object: any, checkValue: any = undefined, uncheckValue: any = undefined) {
    let checked = object;
    if (checkValue == undefined && uncheckValue == undefined) {
      checked = object.checked;
      checkValue = object.checkValue;
      uncheckValue = object.uncheckValue;
    }
    item[name] = checked ? checkValue : uncheckValue;
    this.listListCtrl.updateCheckAll(name, checkValue);
  }

  /**
   * @description
   * 表内のチェックボックスをチェック時にモデルの値と全選択チェックボックスの状態を更新します。
   * @param item 行オブジェクト
   * @param name 項目名
   * @param object チェックボックスの状態またはchecked, checkValue, uncheckValueを保持するオブジェクト
   * @param checkValue チェック状態の値
   * @param uncheckValue 非チェック状態の値
   */
  list1Check(item: any, name: string, object: any, checkValue: any = undefined, uncheckValue: any = undefined) {
    let checked = object;
    if (checkValue == undefined && uncheckValue == undefined) {
      checked = object.checked;
      checkValue = object.checkValue;
      uncheckValue = object.uncheckValue;
    }
    item[name] = checked ? checkValue : uncheckValue;
    this.list1ListCtrl.updateCheckAll(name, checkValue);
  }

  /**
   * @description
   * 表内のチェックボックスをチェック時にモデルの値と全選択チェックボックスの状態を更新します。
   * @param item 行オブジェクト
   * @param name 項目名
   * @param object チェックボックスの状態またはchecked, checkValue, uncheckValueを保持するオブジェクト
   * @param checkValue チェック状態の値
   * @param uncheckValue 非チェック状態の値
   */
  list2Check(item: any, name: string, object: any, checkValue: any = undefined, uncheckValue: any = undefined) {
    let checked = object;
    if (checkValue == undefined && uncheckValue == undefined) {
      checked = object.checked;
      checkValue = object.checkValue;
      uncheckValue = object.uncheckValue;
    }
    item[name] = checked ? checkValue : uncheckValue;
    this.list2ListCtrl.updateCheckAll(name, checkValue);
  }

  /**
   * @description
   * 表内のチェックボックスをチェック時にモデルの値と全選択チェックボックスの状態を更新します。
   * @param item 行オブジェクト
   * @param name 項目名
   * @param object チェックボックスの状態またはchecked, checkValue, uncheckValueを保持するオブジェクト
   * @param checkValue チェック状態の値
   * @param uncheckValue 非チェック状態の値
   */
  list3Check(item: any, name: string, object: any, checkValue: any = undefined, uncheckValue: any = undefined) {
    let checked = object;
    if (checkValue == undefined && uncheckValue == undefined) {
      checked = object.checked;
      checkValue = object.checkValue;
      uncheckValue = object.uncheckValue;
    }
    item[name] = checked ? checkValue : uncheckValue;
    this.list3ListCtrl.updateCheckAll(name, checkValue);
  }

  /**
   * @description
   * 表内のチェックボックスをチェック時にモデルの値と全選択チェックボックスの状態を更新します。
   * @param item 行オブジェクト
   * @param name 項目名
   * @param object チェックボックスの状態またはchecked, checkValue, uncheckValueを保持するオブジェクト
   * @param checkValue チェック状態の値
   * @param uncheckValue 非チェック状態の値
   */
  list4Check(item: any, name: string, object: any, checkValue: any = undefined, uncheckValue: any = undefined) {
    let checked = object;
    if (checkValue == undefined && uncheckValue == undefined) {
      checked = object.checked;
      checkValue = object.checkValue;
      uncheckValue = object.uncheckValue;
    }
    item[name] = checked ? checkValue : uncheckValue;
    this.list4ListCtrl.updateCheckAll(name, checkValue);
  }

  /**
   * @description
   * 表内のチェックボックスをチェック時にモデルの値と全選択チェックボックスの状態を更新します。
   * @param item 行オブジェクト
   * @param name 項目名
   * @param object チェックボックスの状態またはchecked, checkValue, uncheckValueを保持するオブジェクト
   * @param checkValue チェック状態の値
   * @param uncheckValue 非チェック状態の値
   */
  list5Check(item: any, name: string, object: any, checkValue: any = undefined, uncheckValue: any = undefined) {
    let checked = object;
    if (checkValue == undefined && uncheckValue == undefined) {
      checked = object.checked;
      checkValue = object.checkValue;
      uncheckValue = object.uncheckValue;
    }
    item[name] = checked ? checkValue : uncheckValue;
    this.list5ListCtrl.updateCheckAll(name, checkValue);
  }

  /**
   * @description
   * 表内のチェックボックスをチェック時にモデルの値と全選択チェックボックスの状態を更新します。
   * @param item 行オブジェクト
   * @param name 項目名
   * @param object チェックボックスの状態またはchecked, checkValue, uncheckValueを保持するオブジェクト
   * @param checkValue チェック状態の値
   * @param uncheckValue 非チェック状態の値
   */
  list6Check(item: any, name: string, object: any, checkValue: any = undefined, uncheckValue: any = undefined) {
    let checked = object;
    if (checkValue == undefined && uncheckValue == undefined) {
      checked = object.checked;
      checkValue = object.checkValue;
      uncheckValue = object.uncheckValue;
    }
    item[name] = checked ? checkValue : uncheckValue;
    this.list6ListCtrl.updateCheckAll(name, checkValue);
  }

  /**
   * @description
   * 表内のチェックボックスをチェック時にモデルの値と全選択チェックボックスの状態を更新します。
   * @param item 行オブジェクト
   * @param name 項目名
   * @param object チェックボックスの状態またはchecked, checkValue, uncheckValueを保持するオブジェクト
   * @param checkValue チェック状態の値
   * @param uncheckValue 非チェック状態の値
   */
  list7Check(item: any, name: string, object: any, checkValue: any = undefined, uncheckValue: any = undefined) {
    let checked = object;
    if (checkValue == undefined && uncheckValue == undefined) {
      checked = object.checked;
      checkValue = object.checkValue;
      uncheckValue = object.uncheckValue;
    }
    item[name] = checked ? checkValue : uncheckValue;
    this.list7ListCtrl.updateCheckAll(name, checkValue);
  }

  /**
   * @description
   * Event handling for awagSearch (検索)
   */
  awagSearch() {
    const param = this.awagSearchPreCallLogic(this.model.search);
    this.userService.getUserByCustomerNo(param.customerno).subscribe((data) => {
          this.users = data;
          this.model.list = this.users;
          // AwagListController for sort / paging
          this.listListCtrl.setupPagination(this.model.list, true);
          this.awagContext.setVModel('maintenance_search', this.model);
          // console.log('param:', this.model.search);
          console.log(data);
          this.updateSearchPattern(this.model.search);
          if (!data || data.length === 0 ) {
            this.showMessage("該当データなし。検索条件を確認してください。");
          }
          this.hideLoading();
          this.awagAfterViewInit();
        });        
  }

  /**
   * @description
   * Pre API call logic for awagSearch (検索)
   * @param {*} model Model data of screen
   * @returns Edited model data
   */
  protected awagSearchPreCallLogic(model: any) { return model; }

  /**
   * @description
   * API success logic for awagSearch (検索)
   * @param {*} res HTTP response
   */
  awagSearchSuccessLogic(res: any) {
    this.awagLogger.debug('MaintenanceSearchComponent.awagSearchSuccessLogic() ');
    this.awagLogger.debug(res);
    if (res == null) {
      // 204 no content
      this.awagSearchErrorLogic(new AwagError('204', AWAG_COMMON_MESSAGES['SCREEN_COMPONENT_AWAGSEARCH_204']), this.model);
      this.model.list = [];
    } else {
      res = this.awagSearchSuccessCustomLogic(res);
      this.model.list = res.list;
      if (res.awagMessage) {
        this.showMessage(res.awagMessage);
      }
    }
    // AwagListController for sort / paging
    this.listListCtrl.setupPagination(this.model.list, true);
    this.awagContext.setVModel('maintenance_search', this.model);
    this.hideLoading();
    this.awagAfterViewInit();
  }

  /**
   * @description
   * API success custom logic for awagSearch (検索)
   * @param {*} res HTTP response
   * @returns Edited HTTP response
   */
  protected awagSearchSuccessCustomLogic(res: any) { return res; }

  /**
   * @description
   * API error logic for  awagSearch (検索)
   * @param {*} error HTTP error response
   * @param {*} model Model data of screen
   */
  awagSearchErrorLogic(error: any, model: any) {
    this.awagLogger.debug('MaintenanceSearchComponent.awagSearchErrorLogic() ');
    this.awagLogger.warn(error);
    this.model = this.awagSearchErrorCustomLogic(error, this.model);
    this.showError(error);
    this.hideLoading();
    this.awagAfterViewInit();
  }

  /**
   * @description
   * API error custom logic for awagSearch (検索)
   * @param {*} error HTTP error response
   * @param {*} model Model data of screen
   * @returns Edited model data
   */
  protected awagSearchErrorCustomLogic(error: any, model: any) { return model; }

  /**
   * @description
   * Event handling for awagSelect (選択)
   * @param {number} index Index of selected row
   * @param {*} item Model data of selected item
   */
  awagSelect(index: number, item: any) {
    if (index === -1) {
      this.model.search['detailCustomerNo'] = '';
      this.model.search['detailNameKanji'] = '';
      this.model.search['detailNameKana'] = '';
      this.model.search['detailNameRomaji'] = '';
      this.model.search['detailBirthDate'] = '';
      this.model.search['detailAge'] ='';
      this.model.search['detailEto'] ='';
      this.model.search['gender'] = '';
      this.model.search['homePost'] = '';
      this.model.search['detailAddress'] = '';
      this.model.search['detailAddressKana'] = '';
      this.model.search['otherAddress'] = '';
      this.model.search['detailPhoneNo'] = '';
      this.model.search['detailFax'] = '';
      this.model.search['detailMobileNo'] = '';
      this.model.search['workPost'] = '';
      this.model.search['detailWorkAddress'] = '';
      this.model.search['detailWorkName'] = '';
      this.model.search['detailWorkNameKana'] = '';
      this.model.search['detailWorkPhoneNo'] = '';
      this.model.list1 = [];
    } else {
      this.awagContext.setVModel('maintenance_search', this.model);
      this.awagContext.setNextModel(this.awagSelectCustomLogic(this.model, index, item));
      this.listListCtrl.modelSelected = true;
      this.model.search['detailCustomerNo'] = item.customerno;
      this.model.search['detailNameKanji'] = item.namekanji;
      this.model.search['detailNameKana'] = item.namekana;
      this.model.search['detailNameRomaji'] = 'customer';
      this.model.search['detailBirthDate'] = item.birthdaywest;
      this.model.search['detailAge'] ='30';
      this.model.search['detailEto'] ='亥';
      this.model.search['gender'] = item.gender;
      this.model.search['homePost'] = '123-4567';
      this.model.search['detailAddress'] = item.homeadd;
      this.model.search['detailAddressKana'] = item.homeadd;
      this.model.search['otherAddress'] = '有';
      this.model.search['detailPhoneNo'] = item.hometel;
      this.model.search['detailFax'] = item.hometel;
      this.model.search['detailMobileNo'] = item.phone;
      this.model.search['workPost'] = '100-4567';
      this.model.search['detailWorkAddress'] = item.workplace;
      this.model.search['detailWorkName'] = '事務所';
      this.model.search['detailWorkNameKana'] = item.workplace;
      this.model.search['detailWorkPhoneNo'] = item.worktel;
      this.model.list1 = [];    
      
      forkJoin({
        contractno: this.contractnoService.getConctractnoByCustomerNo(item.customerno.replace(/-/g, '')),
        card: this.contractListService.getCardByCustomerNo(item.customerno.replace(/-/g, '')),
        capu1: this.contractListService.getCapu1ByCustomerNo(item.customerno.replace(/-/g, '')),
        capu2: this.contractListService.getCapu2ByCustomerNo(item.customerno.replace(/-/g, '')),
        senso: this.contractListService.getSensoByCustomerNo(item.customerno.replace(/-/g, '')),
        yoshin: this.contractListService.getYoshinByCustomerNo(item.customerno.replace(/-/g, '')),
      }).subscribe({
        next: (result) => {
          this.model.list1 = result.contractno;
          this.model.list2 = result.card;
          this.model.list3 = result.capu1;
          this.model.list4 = result.capu2;
          this.model.list5 = result.senso;
          this.model.list6 = result.yoshin;
          this.list2ListCtrl.setupPagination(this.model.list2, true);
          this.list3ListCtrl.setupPagination(this.model.list3, true);
          this.list4ListCtrl.setupPagination(this.model.list4, true);
          this.list5ListCtrl.setupPagination(this.model.list5, true);
          this.list6ListCtrl.setupPagination(this.model.list6, true);
          this.awagContext.setVModel('maintenance_search', this.model);
          // console.log ('select row:', this.model);
          this.hideLoading();
          this.awagAfterViewInit();

        },
        error: (err) => {
          console.error('One of the APIs failed', err);
        }
      });
    }
    
  }

  /**
   * @description
   * Custom logic for awagSelect (選択)
   * @param {*} model Model data of screen
   * @param {number} index Index of selected row
   * @param {*} item Model data of selected item
   * @returns Edited model data of selected item
   */
  protected awagSelectCustomLogic(model: any, index: number, item: any) { return item; }

  /**
   * @description
   * Event handling for clear (クリア)
   * @param {number} index Index of selected row
   * @param {*} item Model data of selected item
   */
  clear() {
    const modalRef = this.appCommon.getModal().open(AwagConfirmModalComponent, { centered: true, animation: false });
    this.awagContext.setVModel('maintenance_search', this.model);
    // self screen event
    this.model = this.clearCustomLogic(this.model);
    this.awagAfterViewInit();
  }

  /**
   * @description
   * Custom logic for clear (クリア)
   * @param {*} model Model data of screen
   * @returns Edited model data
   */
  protected clearCustomLogic(model: any) { 
      // this.searchPaternsCode = [];
	    // this.model.search = {
	    //   _inclusiveor: 'false'
	    // };
      
      this.model.search = {
        _inclusiveor: 'false',
        _awag_areaCheck: this.areaCheckCode[1].value,
        areaCheck: this.areaCheckCode[1].value,
        searchopts: this.searchOptsCode[0].value
      };
      
      // 行データの選択状態をクリア
      if (this.selectedRowIndex !== -1) {
        this.selectedRowIndex = -1;
        this.awagSelect(-1, null);
      }
      this.listListCtrl ??= new AwagListController(this.model.list, null);
      this.list2ListCtrl ??= new AwagListController(this.model.list2, null);
      this.list3ListCtrl ??= new AwagListController(this.model.list3, null);
      this.list4ListCtrl ??= new AwagListController(this.model.list4, null);
      this.list5ListCtrl ??= new AwagListController(this.model.list5, null);
      this.list6ListCtrl ??= new AwagListController(this.model.list6, null);
      this.list1ListCtrl ??= new AwagListController(this.model.list1, null);
      this.list7ListCtrl ??= new AwagListController(this.model.list7, null);
      // Todo check why to set again list here
      this.model.list = [];
      this.model.search.customerclass = '0';
      this.searchPaternsCode = [];
      this.awagContext.setVModel('maintenance_search', this.model);

	    return model; 
    }

  /**
   * @description
   * Event handling for customerclassOnChange (顧客区分 onChange)
   * @param {number} index Index of selected row
   * @param {*} item Model data of selected item
   */
  customerclassOnChange() {
    this.awagContext.setVModel('maintenance_search', this.model);
    // self screen event
    this.model = this.customerclassOnChangeCustomLogic(this.model);
    this.awagAfterViewInit();
  }

  /**
   * @description
   * Custom logic for customerclassOnChange (顧客区分 onChange)
   * @param {*} model Model data of screen
   * @returns Edited model data
   */
  
  protected customerclassOnChangeCustomLogic(model: any) { 
    if (this.model.search.customerclass == 1) {
      this.isHoujinBool = true;
    } else {
      this.isHoujinBool = false;
    }
    return model; 
  }

  protected areaOnChangeCustomLogic(model: any) { 
    console.log(this.model.search.area);
    console.log(this.areaOptsCode);
    this.provinceOptsCode = this.getPrefecturesByRegion(this.getAreaByValue(this.model.search.area));
    return model; 
  }

  /**
   * @description
   * Event handling for importButton (取込)
   * @param {number} index Index of selected row
   * @param {*} item Model data of selected item
   */
  openPopupWindow() {
    
    let popupWidth, popupHeight, left, bottom;
    left = window.screen.width - 1220;
    bottom = window.screen.height - 700;
    popupHeight = 700;
    popupWidth = 1220;
    window.open('basicattributes', '_blank', `width=${popupWidth},height=${popupHeight},left=${left},top=${bottom},resizable=yes,scrollbars=yes`);
  }

  /**
   * @description
   * Custom logic for importButton (取込)
   * @param {*} model Model data of screen
   * @returns Edited model data
   */
  protected importButtonCustomLogic(model: any) { return model; }

  /**
   * @description
   * Event handling for landsearch (陸事検索)
   * @param {number} index Index of selected row
   * @param {*} item Model data of selected item
   */
  landsearch() {
    this.awagContext.setVModel('maintenance_search', this.model);
    // screen transition to land(陸事選択)
    this.awagContext.setNextUrl('/maintenance/land');
    const nextModel = this.landsearchCustomLogic(this.model);
    const subContext = new AwagSubContext();
    subContext.setReturnToPath(this.router.url);
    subContext.setBaseModelKey('maintenance_search');
    subContext.setAllowedMergeProperties([
      'search.landlabel:name',
      'search.landcode:code',
    ]);
    subContext.setNextModel(nextModel);
    if (this.awagContext.getNextUrl()) {
      this.awagContext.setSubContext(subContext);
    }
    this.awagNavigateNextPage();
  }

  /**
   * @description
   * Custom logic for landsearch (陸事検索)
   * @param {*} model Model data of screen
   * @returns Edited model data
   */
  protected landsearchCustomLogic(model: any) { return model; }

  /**
   * @description
   * Event handling for sVClink (SVC連携)
   * @param {number} index Index of selected row
   * @param {*} item Model data of selected item
   */
  sVClink() {
    this.awagContext.setVModel('maintenance_search', this.model);
    // self screen event
    this.model = this.sVClinkCustomLogic(this.model);
    this.awagAfterViewInit();
  }

  /**
   * @description
   * Custom logic for sVClink (SVC連携)
   * @param {*} model Model data of screen
   * @returns Edited model data
   */
  protected sVClinkCustomLogic(model: any) { return model; }

  /**
   * @description
   * Event handling for update (最新情報に更新)
   * @param {number} index Index of selected row
   * @param {*} item Model data of selected item
   */
  update() {
    this.awagContext.setVModel('maintenance_search', this.model);
    // self screen event
    this.model = this.updateCustomLogic(this.model);
    this.awagAfterViewInit();
  }

  /**
   * @description
   * Custom logic for update (最新情報に更新)
   * @param {*} model Model data of screen
   * @returns Edited model data
   */
  protected updateCustomLogic(model: any) { return model; }

  
  onBlurFormat() {
    console.log(this.model.search.phone);
    this.model.search.phone = this.jpPhoneFormatPipe.transform(this.model.search.phone);
  }

  onHyphunFormat(field: string) {
    this.model.search[field] = this.hyphenFormatPipe.transform(this.model.search[field]);
  }

  
  onInput(field: string, event: Event) {
    const target = event.target as HTMLInputElement;
    this.model.search[field] = target.value.replace(/-/g, '');
  } 

   patternArray: boolean[][] = [
      [true,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false],
      [false,true,false,false,false,false,false,false,false,false,false,false,false,false,false,false],
      [false,false,true,true,false,false,false,false,false,false,false,false,false,false,false,false],
      [false,false,false,false,true,true,true,true,false,false,false,false,false,false,false,false],
      [false,false,false,false,false,false,false,false,true,true,false,true,false,true,false,false],
      [false,false,false,false,false,false,false,false,true,false,false,true,false,true,false,false],
      [false,false,false,false,false,false,false,false,false,true,false,true,false,true,false,false],
      [false,false,false,false,false,false,false,false,false,false,true,true,false,true,false,false],
      [false,false,false,false,false,false,false,false,true,true,false,false,true,true,false,false],
      [false,false,false,false,false,false,false,false,true,false,false,false,true,true,false,false],
      [false,false,false,false,false,false,false,false,false,true,false,false,true,true,false,false],
      [false,false,false,false,false,false,false,false,false,false,true,false,true,true,false,false],
      [false,false,false,false,false,false,false,false,true,true,false,false,false,true,false,false],
      [false,false,false,false,false,false,false,false,true,false,false,false,false,true,false,false],
      [false,false,false,false,false,false,false,false,false,true,false,false,false,true,false,false],
      [false,false,false,false,false,false,false,false,false,false,true,false,false,true,false,false],
      [false,false,false,false,false,false,false,false,false,false,false,true,false,true,false,false],
      [false,false,false,false,false,false,false,false,false,false,false,false,true,true,false,false],
      [false,false,false,false,false,false,false,false,true,true,false,true,false,false,false,false],
      [false,false,false,false,false,false,false,false,true,false,false,true,false,false,false,false],
      [false,false,false,false,false,false,false,false,false,true,false,true,false,false,false,false],
      [false,false,false,false,false,false,false,false,false,false,true,true,false,false,false,false],
      [false,false,false,false,false,false,false,false,true,true,false,false,true,false,false,false],
      [false,false,false,false,false,false,false,false,true,false,false,false,true,false,false,false],
      [false,false,false,false,false,false,false,false,false,true,false,false,true,false,false,false],
      [false,false,false,false,false,false,false,false,false,false,true,false,true,false,false,false],
      [false,false,false,false,false,false,false,false,false,false,false,false,false,true,false,false],
      [false,false,false,false,false,false,false,false,true,false,false,false,false,false,false,false],
      [false,false,false,false,false,false,false,false,false,true,false,false,false,false,false,false],
      [false,false,false,false,false,false,false,false,false,false,true,false,false,false,false,false],
      [false,false,false,false,false,false,false,false,false,false,false,false,false,false,true,false],
      [false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,true]
    ];

      fieldInSearchPatternIndex: { [key: string]: any } = {
        'cardno':0,
        'contract':1,
        'landcode':4,
        'registercode':5,
        'registerkana':6,
        'registerseq':7,
        'namekana':8,
        'namekanji':9,
        'nameromaji':10,
        'year':11,
        'monthday':12,
        'phone':13,
        'affiliationno':14,
        'customerno':15
      };
    
      getRowIndexesWithTrue(matrix: boolean[][], columnIndex: number): number[] {
        return matrix
          .map((row, index) => row[columnIndex] ? index : -1)
          .filter(index => index !== -1);
      }

      updateSearchPattern(param: any) {
        let i = 0;
        this.searchPaternsCode = [];
        let keys = Object.keys(this.fieldInSearchPatternIndex);

        keys.forEach(key => {
          // console.log(key);
          if (param[key] && param[key] !== "") {
            let temp = this.getRowIndexesWithTrue(this.patternArray, this.fieldInSearchPatternIndex[key]);
            // console.log(temp);
            // console.log(temp.length);
            for (i = 0; i < temp.length; i++) {
              // console.log(this.searchPaternsCodeOrigin[temp[i]]);
              this.searchPaternsCode.push(this.searchPaternsCodeOrigin[temp[i]]);
            }
          }
        });

        
        this.searchPaternsCode = this.searchPaternsCode.filter((item, index, self) =>
          index === self.findIndex(t => t.name === item.name)
        );

        // console.log(this.searchPaternsCode);
      }

      
      selectedRowIndex: number = -1;
      // liu-mod 20250822 PRJ標準確認事項：選択解除
      onRowClick(row: any, index: number): void {
        const tblRadioId = 'list-awagSelected-' + index.toString();
        const radioBtnCheck = document.querySelector('[id="' + tblRadioId + '"]') as HTMLInputElement;

        // 現在の行は選択されたかどうか確認
        if (this.selectedRowIndex === index) {
            // クリックした行は選択された場合、取り消し
            this.listSelected = false;
            radioBtnCheck.checked = false;
            this.selectedRowIndex = -1;
            this.awagSelect(-1, null);
        } else {
            // クリックしていない場合選択する
            this.listSelected = row;
            radioBtnCheck.checked = true;
            this.selectedRowIndex = index;
            this.awagSelect(index, row);
        }
      }
      selectRow(index: number): void {
        this.selectedRowIndex = index;
      }

      toZenkakuExample(str: string) {
        this.model.search[str] = this.toZenkaku(this.model.search[str]);
      }

      toZenkaku(str: string) {
        return str.replace(/[A-Za-z0-9]/g, function(s) {
            const code = s.charCodeAt(0);
            if (code >= 0x21 && code <= 0x7E) {
              return String.fromCharCode(code + 0xFEE0);
            }
            return s;
          });
      }

     

  
  regions = [
    
    {
      name: '北海道',
      prefectures: [
        { name: '北海道', value: 0 }
      ]
    },
    {
      name: '東北',
      prefectures: [
        { name: '青森', value: 1 },
        { name: '岩手', value: 2 },
        { name: '宮城', value: 3 },
        { name: '秋田', value: 4 },
        { name: '山形', value: 5 },
        { name: '福島', value: 6 }
      ]
    },
    {
      name: '関東',
      prefectures: [
        { name: '茨城', value: 7 },
        { name: '栃木', value: 8 },
        { name: '群馬', value: 9 },
        { name: '埼玉', value: 10 },
        { name: '千葉', value: 11 },
        { name: '東京都', value: 12 },
        { name: '神奈川', value: 13 }
      ]
    },
    {
      name: '中部',
      prefectures: [
        { name: '新潟', value: 14 },
        { name: '富山', value: 15 },
        { name: '石川', value: 16 },
        { name: '福井', value: 17 },
        { name: '山梨', value: 18 },
        { name: '長野', value: 19 },
        { name: '岐阜', value: 20 },
        { name: '静岡', value: 21 },
        { name: '愛知', value: 22 }
      ]
    },
    {
      name: '近畿',
      prefectures: [
        { name: '三重', value: 23 },
        { name: '滋賀', value: 24 },
        { name: '京都府', value: 25 },
        { name: '大阪府', value: 26 },
        { name: '兵庫', value: 27 },
        { name: '奈良', value: 28 },
        { name: '和歌山', value: 29 }
      ]
    },
    {
      name: '中国',
      prefectures: [
        { name: '鳥取', value: 30 },
        { name: '島根', value: 31 },
        { name: '岡山', value: 32 },
        { name: '広島', value: 33 },
        { name: '山口', value: 34 }
      ]
    },
    {
      name: '四国',
      prefectures: [
        { name: '徳島', value: 35 },
        { name: '香川', value: 36 },
        { name: '愛媛', value: 37 },
        { name: '高知', value: 38 }
      ]
    },
    {
      name: '九州',
      prefectures: [
        { name: '福岡', value: 39 },
        { name: '佐賀', value: 40 },
        { name: '長崎', value: 41 },
        { name: '熊本', value: 42 },
        { name: '大分', value: 43 },
        { name: '宮崎', value: 44 },
        { name: '鹿児島', value: 45 }
      ]
    },
    {
      name: '沖縄',
      prefectures: [
        { name: '沖縄', value: 46 }
      ]
    }
  ];


  
  getPrefecturesByRegion(regionName: string): any {
    
    const region = this.regions.find(r => r.name === regionName);
    return region ? region.prefectures : [];

  }

  getAreaByValue(value: string): any {
    
    const region = this.areaOptsCode.find(r => r.value === value);
    return region ? region.name : "";

  }

  isProvinceDisabled: boolean = true;
  areaOnChange() {
    
    this.isProvinceDisabled = this.model.search.area.trim() === '';
    this.awagContext.setVModel('maintenance_search', this.model);
    // self screen event
    this.model = this.areaOnChangeCustomLogic(this.model);
    this.awagAfterViewInit();
  }

  // liu-add start 20250822 PRJ標準確認事項：ハイフン有無許容
  // カード番号入力
  formatInput(event: any, type: 'number16' | 'alnum20') {
    const input = event.target;
    const rawValue = input.value;
    let cursorPosition = input.selectionStart || 0;

    let formatted = '';
    if (type === 'number16') {
      let numbers = rawValue.replace(/\D/g, '').slice(0, 16);
      formatted = numbers.replace(/(.{4})/g, '$1-');
      if (formatted.endsWith('-')) {
        formatted = formatted.slice(0, -1);
      }
      this.model.search.cardno = formatted;
    } else if (type === 'alnum20') {
      let validChars = rawValue.replace(/[^0-9a-zA-Z]/g, '').slice(0, 20);
      formatted = validChars.replace(/(.{4})/g, '$1-');
      if (formatted.endsWith('-')) {
        formatted = formatted.slice(0, -1);
      }
      this.model.search.affiliationno = formatted;
    }

    input.value = formatted;
  }

  // 割賦契約番号入力
  formatContract (event: any) {
    const input = event.target;
    const rawValue = input.value;

    let numbers = rawValue.replace(/\D/g, '')
    let formatted = '';

    if (numbers.length <= 9) {
      // 9桁以内：フォーマット維持
      formatted = numbers.slice(0, 9);
    } else {
      // 15桁以内：頭5桁‐10桁
      let part1 = numbers.slice(0, 5);
      let part2 = numbers.slice(5, 15);
      formatted = part1 + (part2 ? '-' + part2 : '');
    }

    input.value = formatted;
    this.model.search.contract = formatted;
  }
  // liu-add end 20250822 PRJ標準確認事項：ハイフン有無許容

  // liu-add start 20250825 PRJ標準確認事項：inputにコピーボタン追加
  copyToClipboard(event: MouseEvent): void {
    // inputのコピーボタン
    const button = event.currentTarget as HTMLButtonElement;
    const input = button.previousElementSibling as HTMLInputElement;
    // inputの入力内容を選択する
    input.select();
    input.setSelectionRange(0, 99999);
    // 内容をクリップボードにコピーする
    // navigator.clipboard.writeText(input.value)
    //   .then(() => {
    //     alert(input.value);
    //   })

    const nonStringValue = input.value.replace(/\D/g, '');
    navigator.clipboard.writeText(nonStringValue)
      .then(() => {
        // this.snackBar.open('コピーされました！', '閉じる', {
        //   duration: 1000,
        //   verticalPosition: 'top',
        //   horizontalPosition: 'center'
        // })
        alert(nonStringValue)
      })
  }
  // liu-add end 20250825 PRJ標準確認事項：inputにコピーボタン追加
  // liu-add start 20250825 PRJ標準確認事項：各顧客名の入力チェック
  kanaInputCheck() {
    const inputKana = document.getElementById('_group0-namekana') as HTMLInputElement;
    const isHankakuKatakana = /^[\uFF66-\uFF9D]*$/.test(inputKana.value);

    if (!isHankakuKatakana) {
      inputKana.style.backgroundColor = 'red';
    }

  }
  // liu-add end 20250825 PRJ標準確認事項：各顧客名の入力チェック
  showSuccessMsg: boolean = false;
  showWarningMsg: boolean = false;
  showDangerMsg: boolean = false;
  showInfoMsg: boolean = false;
  showAlert(msgCategory: string | null) {
    if (msgCategory === 'info') {
      this.showInfoMsg = true;
    } else if (msgCategory === 'warning') {
      this.showWarningMsg = true;
    } else if (msgCategory === 'error') {
      this.showDangerMsg = true;
    } else if (msgCategory === 'success') {
      this.showSuccessMsg = true;
    }
  }
  contractList() {
      this.dialog.open(ContactHistoryComponent, {});
  }

  // liu-add 20250825 start PRJ標準確認事項：ハイフン有無許容
  dateFormatInput(event: any) {
    const input = event.target;
    let rawValue = input.value;
    rawValue = rawValue.replace(/\D/g, '');
    let formatted = '';

    if (rawValue.length > 4 ) {
      formatted = rawValue.slice(0, 4) + '-' + rawValue.slice(4);
    }
    if (rawValue.length > 6) {
      formatted = rawValue.slice(0, 4) + '-' + rawValue.slice(4, 6) + '-' + rawValue.slice(6, 9);
    }

    if (formatted) {
      input.value = formatted;
    } else {
      input.value = rawValue;
    }
  }
  keyPressDown(event: KeyboardEvent, index: number) {
    if (event.key === 'ArrowDown') {
      event.preventDefault();
      // const nextIndex = index + 1;
      const nextIndex = this.selectedRowIndex + 1;
      if (nextIndex < this.model.list.length) {
        this.selectedRowIndex = nextIndex;
      }
    }
    if (event.key === 'ArrowUp') {
      event.preventDefault();
      // const prevIndex = index - 1;
      const prevIndex = this.selectedRowIndex - 1;
      if (prevIndex >= 0) {
        this.selectedRowIndex = prevIndex;
      }
    }
  }
  /**
   * @description
   * Event handling for delete (削除)
   */
  delete() {

    // liu-add 20250825 ダイアログの各画面定義
    const modalRef = this.appCommon.getModal().open(AwagConfirmModalComponent, { centered: true, animation: false });
  }
  
  // liu-add 20250825 start 検索結果クリア
  clearResult() {
    if (this.selectedRowIndex !== -1) {
      this.selectedRowIndex = -1;
      this.awagSelect(-1, null);
    }
    
    this.listListCtrl ??= new AwagListController(this.model.list, null);
    this.list2ListCtrl ??= new AwagListController(this.model.list2, null);
    this.list3ListCtrl ??= new AwagListController(this.model.list3, null);
    this.list4ListCtrl ??= new AwagListController(this.model.list4, null);
    this.list5ListCtrl ??= new AwagListController(this.model.list5, null);
    this.list6ListCtrl ??= new AwagListController(this.model.list6, null);
    this.list1ListCtrl ??= new AwagListController(this.model.list1, null);
    this.list7ListCtrl ??= new AwagListController(this.model.list7, null);
    // Todo check why to set again list here
    this.model.list = [];
    
    // this.model.list1 = [];
  }
  // liu-add 20250825 end 検索結果クリア
  onTblRowDblClick(row: any, index: number): void {
    // this.contractList();
    this.openPopupWindow();
  }
  copyToCondition(event: MouseEvent): void {
    // inputのコピーボタン
    const button = event.currentTarget as HTMLButtonElement;
    const input = button.previousElementSibling as HTMLInputElement;
    // inputの入力内容を選択する
    const rowData: string | null = input.textContent;

    if (rowData) {
      const customerNoSearch = document.getElementById('_group0-customerno') as HTMLInputElement;
      customerNoSearch.value = rowData;
      navigator.clipboard.writeText(rowData)
      .then(() => {
        this.snackBar.open('コピーされました！', '閉じる', {
          duration: 1000,
          verticalPosition: 'top',
          horizontalPosition: 'center'
        })
      })
    }
  }
  duplRowSelect() {
    // this.model = this.getModelOnInit('contacthistory_contacthistory');
    this.showError(this.getErrorOnInit());
    if (this.model.search === undefined) {
      this.model.search = {
        _inclusiveor: 'false'
      };
    }
    this.model = this.awagSearchCustomLogic(this.model);
    this.list7ListCtrl ??= new AwagListController(this.model.list7, null);
    this.awagContext.setVModel('contacthistory_contacthistory', this.model);
  }
  awagSearchCustomLogic(model: any) { 
    this.contractHistoryService.getContacthistories().subscribe((data) => {
          this.model.list7 = data;
          this.list7ListCtrl.setupPagination(this.model.list7, true);
          this.awagContext.setVModel('contacthistory_contacthistory', this.model);
          console.log(data);
          if (!data || data.length === 0 ) {
            this.showMessage("該当データなし。検索条件を確認してください。");
          }
          this.hideLoading();
          this.awagAfterViewInit();
        });  
    return model; 
  }
  onRowCheckOn(row: any, index: number): void {
    this.selectedRowIndex = index;
  }

  selectedItems: any[] = [];
  isSelected(item: any): boolean {
    return this.selectedItems.includes(item);
    
  }
  toggleSelection(item: any, event: Event): void {
    const radioRow = event.target as HTMLInputElement;
    if (radioRow['checked']) {
      this.selectedItems.push(item);
    } else {
      this.selectedItems = this.selectedItems.filter(selectedItem => selectedItem !== item);
    }
  }
  closeMessage(msgCate: string) {
    if (msgCate === 'info') {
      this.showInfoMsg = false;
    } else if (msgCate === 'warning') {
      this.showWarningMsg = false;
    } else if (msgCate === 'error') {
      this.showDangerMsg = false;
    } else if (msgCate === 'success') {
      this.showSuccessMsg = false;
    } 
  }

  // 基本属性画面追加
  fileName : string = '';
  onFileSelected(event: any) {
    const files = event.target.files;
    if (files.length > 0) {
      this.fileName = files[0].name;
    } else {
      this.fileName = '';
    }
  }
  clearFile() {
    this.fileName ='';
    const fileInput = document.getElementById('file-upload') as HTMLInputElement;
    if (fileInput) {
      fileInput.value = '';
    }
  }
  
  firstPart: string = '';
  secondPart: string = '';
  onFirstPartInput() {
    if (this.firstPart.length >= 6) {
      const secondInput = document.getElementById('secondInput') as HTMLInputElement;
      secondInput.focus();
    }
  }

  // tab functions
  creditScore() {
    // alert('creditScore');
  }
  attributeList() {
    // alert('attributeList');
  }
  functionalAxis() {
    // alert('functionalAxis');
  }
  experienceAxis() {
    // alert('experienceAxis');
  }
  contactRegister() {
    // alert('contactRegister');
  }
  contactList() {
    // alert('contactList');
  }
  specialNoteReg() {
    // alert('specialNoteReg');
  }
  customerCharacterReg() {
    // alert('customerCharacterReg');
  }

  importButton() {
      this.dialog.open(ReferenceInputComponent, {});
  }

}
